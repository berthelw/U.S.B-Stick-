
 HC-SR04 Ping distance sensor:
 VCC to arduino 5v
 GND to arduino GND
 Echo to Arduino pin 7
 Trig to Arduino pin 8

 
#include <SoftwareSerial.h>

//DEFINING 
#define RECEIVINGCALL 1
#define IDLE 2
#define BUSY 3
#define NO_ANSWER 4
#define TALKING 5
#define ERROR 6

SoftwareSerial gsm(9, 10);//GSM PIN TO COMMUNITCATE
#define Pin "pin"
#define ok "OK"
#define ERROR_str "ERROR"
#define Connected "Connected"
#define Connecting "connecting"
#define CLCC "+CLCC:"
#define atCLCC "AT+CLCC"
#define CMGF "AT+CMGF=1"
#define CMGL "+CMGL:"
#define CMGS "AT+CMGS=\""
#define CMGD "AT+CMGD="
#define UNREAD "AT+CMGL=\"REC UNREAD\""
#define CMGDA "AT+CMGDA=\"DEL ALL\""
#define CNMI "AT+CNMI=0,0,0,0"
#define echoPin 7 // Echo Pin
#define trigPin 6// Trigger Pin
#define LEDPin 13// Onboard LED
#define key A0//TRACK BUTTON
#define buzzer 8//BUZZER
#define pot A1//VARISTOR
#define LDR A3//LDR
#define d1 2//RF DATA PIN
#define d2 3

//#define water1  A1

#define water2  A2
//DEFINING VARIABLES
boolean gsm_connect = false;
boolean notConnected = true;
int no_configured = 0;
unsigned long current_time ;
String numtel;
String msg = "";
String indata = "";
String inputString = "";
String msg_index;
int index1;
int index2;
String call_number, num;
String sms_num, sms; // = get_sender_number();
float tempC;
int reading;
int track_me = 4;
long time1;
long time2;
int smssend = 0;

float lat_int;
float lon_int;

String lat = "lattitude=";
String lon = "\nlongitude=";
String site = "\nhttp://maps.google.com/maps?f=q&q=";
String help1 = "Soldier need help\n";


long duration, distance; // Duration used to calculate distance
int key2, x = 0, d22, d11, rf_sense = 0, ldr_sense = 0, ultra_sense = 0, water_sense = 0, ss = 0;
int sensorVal = 0, maxVal = 0, sensorVal2 = 0, maxVal2 = 0, sensorVal3 = 0, maxVal3 = 0, sensorVal4 = 0, maxVal4 = 0, sensorVal5 = 0, maxVal5 = 0, pwmVal = 0;

void setup()//SETTING PINS AS OUTPUT/INPUT
{
  Serial.begin (9600);

  gsm.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(LEDPin, OUTPUT);

  pinMode(key, INPUT);
  pinMode(echoPin, INPUT);
  pinMode(pot, INPUT);
  pinMode(LDR, INPUT);
  pinMode(d1, INPUT);
  pinMode(d2, INPUT);
  pinMode(track_me, INPUT);
  pinMode(water2, INPUT);
  digitalWrite(buzzer, LOW);

  while (1)//INITIALLIZING GSM
  {
    String temp2;
    gsm.println("ATE0");
    delay(10);
    if (gsm.available())
    {
      while (gsm.available())
       { 
        temp2 +=(char) gsm.read();
        delay(10);
        }
    }
    Serial.println(temp2)
    if (temp2.indexOf("OK") >= 0)
    {
      if (connect_gsm())
      {

        break;
      }
      else
      {
        buz_tone(1);
        delay(1000);
      }
    }
    else
      {
        buz_tone(1);
        delay(1000);
      }
  }

  while ((no_configured != 1))//WAITING FOR CALL
  {  
    buz_tone(2); 
    delay(1000);
    switch (call_status())
    {
      case IDLE:
       
            delay(1200);
            buz_tone(2);
        break;

      case RECEIVINGCALL: //Someone is calling 
        Serial.println(RECEIVING_CALL);
        call_number = get_call_number();
                lcd.clear();
                lcd.print(F("Receiving call"));
                lcd.setCursor(0, 1);
                lcd.print(call_number);
        hangcall();
        delay(1500);
        numtel = call_number;
                lcd.clear();
                lcd.print(F("Sending SMS"));
        sendsms(F("Number configured."), numtel);
                lcd.clear();
                lcd.print(F("SMS sent.."));
        no_configured = 1;
    }
  }
  delay(1000);
}

void loop()//MAIN LOOP
{

  if (digitalRead(track_me) == HIGH)//IF TRACK BUTTON NOT PRESSED
  {
    ultrasonic();//DISTANCE SENSING
    ldr();//LIGHT SENSING
    rf();//RF SENSING
    watersens();//WATER SENSING
    buzzer_led();
    key2 = digitalRead(key);
    if (key2 == HIGH && x == 1)
    {
      x = 0;
    }
    else if (key2 == HIGH && x == 0)
    {
      x = 1;
    }
  }
  else//IF TRACK BUTTON IS PRESSED
  {
    gps_track();

  }


}

void ultrasonic()//DISTANCE SENSING
{
  /* The following trigPin/echoPin cycle is used to determine the
  distance of the nearest object by bouncing soundwaves off of it. */
 
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(20);

  digitalWrite(trigPin, HIGH );
  duration = pulseIn(echoPin, HIGH);

  sensorVal = analogRead(pot);
   Serial.println(sensorVal);
  maxVal = map(sensorVal, 0, 1023, 0, 25);
  //Calculate the distance (in cm) based on the speed of sound.
  distance = duration / 58.2;
   Serial.println(distance);
  if (distance <= maxVal)
  {
    ultra_sense = 1;
  }
  else
  {
    ultra_sense = 0;
  }
}

void ldr()//LIGHT SENSING
{
  if (x == 1)
  {
    sensorVal2 = analogRead(LDR);
    maxVal2 = map(sensorVal2, 0, 1023, 0, 255);
    Serial.println(maxVal2);
    if (maxVal2 >= 2)
    {
      ldr_sense = 1;
    }
    else
    {
      ldr_sense = 0;
    }
  }
}

void rf()//RF SENSING
{
  d11 = digitalRead(d1);

  if (d11 == HIGH )
  {
    rf_sense = 1;
  }
  d22 = digitalRead(d2);

  if (digitalRead(d2) == LOW)
  {
    rf_sense = 0;
  }
}

void watersens()//WATER SENSING
{
  sensorVal3 = analogRead(water2);
  maxVal3 = map(sensorVal3, 0, 1023, 0, 255);

          sensorVal4 = analogRead(water2);
          maxVal4 = map(sensorVal4, 0, 1023, 0, 255);
  
          sensorVal5 = analogRead(water3);
          maxVal5 = map(sensorVal5, 0, 1023, 0, 255);

  if (maxVal3 >= 100 )
  {
    water_sense = 1;
  }

  else if (maxVal3 <= 150 )
  {
    water_sense = 0;
  }

}

void buzzer_led()//BUZZER SEQUENCE FOR SENSORS
{ analogWrite(buzzer,0);
  if (water_sense == 1)
  {
    for (int i = 0; i < 1000; i++)
    {
      digitalWrite(buzzer, HIGH);
      digitalWrite(LEDPin, HIGH);
      delayMicroseconds(100);
      digitalWrite(buzzer, LOW);
      digitalWrite(LEDPin, LOW);
      delayMicroseconds(100);
    }
  }
  if (rf_sense == 1)
  {
    pwmVal = 0;
    analogWrite(LEDPin, 250);
    analogWrite(buzzer, 250);
    delay(100);
  }
  else if (ldr_sense == 1)
  {

    for (int i = 0; i < 1000; i++)
    {
      digitalWrite(buzzer, HIGH);
      digitalWrite(LEDPin, HIGH);
      delayMicroseconds(150);
      digitalWrite(buzzer, LOW);
      digitalWrite(LEDPin, LOW);
      delayMicroseconds(150);
    }
  }
  else if (ultra_sense == 1)
  {

    analogWrite(LEDPin, 250);
    analogWrite(buzzer, 250);
    delay(1000);
    analogWrite(LEDPin, 0);
    analogWrite(buzzer, 0);
    delay(500);

  }
  else if ( ldr_sense == 0 && ultra_sense == 0 && rf_sense == 0 && water_sense == 0)

  {
    pwmVal = 0;
    digitalWrite(buzzer, LOW);
    digitalWrite(LEDPin, LOW);
    delay(10);
  }

}


void gps_track()//GET GPS LOACTION
{
   lcd.clear();
   lcd.print(F("tracking..."));
  char char1[10], char2[10], char3[5], char4[7];
  String slat, slon, msg, sbeat, stemp;
  lat_int = 0;
  lon_int = 0;
  delay(1500);
  indata = sendcmd("AT+CGNSINF", 1);
  if (indata.indexOf("+CGNSINF:") >= 0)
  {
    Serial.print("indata:" );
    Serial.println(indata);
    int index1 = indata.indexOf(',');
    String s2 = indata.substring(index1 + 1);
    index1 = s2.indexOf(',');
    s2 = s2.substring(index1 + 1);
    index1 = s2.indexOf(',');
    s2 = s2.substring(index1 + 1);
    Serial.println(s2);
    int index2 = s2.indexOf(',');
    slat = s2.substring(0, index2 - 1);
    Serial.print("lat = ");
    lat_int = slat.toFloat();
    Serial.println(lon_int);
    String s3 = s2.substring(index2 + 1);
    Serial.println(s3);
    int index3 = s3.indexOf(',');
    slon = s3.substring(0, index3 - 1);
    lon_int = slon.toFloat();
    Serial.print("lon = ");
    Serial.println(lon_int);
  }
  if (!(lat_int > 0) && !(lon_int > 0))
  {
        lcd.clear();
        lcd.print(F("gps not working.."));
    msg = "GPS not Working...";
    buz_tone(1);
    delay(1500);
    goto down;
  }

  else
  {
    msg = site + slat + "," + slon + "&z=16";
    buz_tone(3);
  }


  delay(2000);
  sendsms(msg, numtel);
}

void checksms(String sms_number, String msg)//SEND SMS FUNCTION
{
  if ((msg.startsWith(F("s"))) && (sms_number.indexOf(numtel) >= 0))
  {
     lcd.clear();
     lcd.print(F("sending status"));
     delay(1500);
     gps_track(0);
  }
  else
  {
       lcd.clear();
       lcd.print(F("INVALID SMS")); //Serial.print(F("INVALID MESSAGE"));
  }
  delay(2000);
}

void buz_tone (int a)//BUZZER SEQUENCE FOR GSM
{
  for (int g = 0; g <= a; g++)
  {
    digitalWrite(buzzer, HIGH);
    delay(100);
    digitalWrite(buzzer, LOW);
    delay(100);
  }
}
